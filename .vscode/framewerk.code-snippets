{
  // Place your Framewerk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Module": {
    "scope": "lua",
    "prefix": "module",
    "Fusion Page": {
      "prefix": "fpage",
      "body": [
        "--// Services",
        "local Plugin = script:FindFirstAncestorWhichIsA(\"Plugin\")",
        "local Players = game:GetService(\"Players\")",
        "local RunService = game:GetService(\"RunService\")",
        "",
        "--// Interface",
        "local Interface = Plugin.Interface",
        "local InterfaceSignals = require(Plugin.Config.Events.Interface)",
        "local InterfaceSettings = require(Interface.Settings)",
        "",
        "--// Util",
        "local Util = Interface.Util",
        "local Tweens = require(Util.Tweens)",
        "local Sounds = require(Util.Sounds)",
        "local Images = require(Util.Images)",
        "",
        "--// Packages",
        "local Packages = Plugin.Packages",
        "",
        "--// Fusion",
        "local Fusion = require(Packages.Fusion)"
        "",
        "--// Fusion Imports",
        "local New = Fusion.New",
        "local Ref = Fusion.Ref",
        "local Out = Fusion.Out",
        "local Value = Fusion.Value",
        "local Tween = Fusion.Tween",
        "local OnEvent = Fusion.OnEvent",
        "local Cleanup = Fusion.Cleanup",
        "local Computed = Fusion.Computed",
        "local Observer = Fusion.Observer",
        "local Children = Fusion.Children",
        "",
        "--// Configuration",
        "local Settings = {",
        "	Debug = true,",
        "	Page = \"${0:$TM_FILENAME_BASE}\",",
        "}",
        "",
        "--------------------------------------------------------------------------------",
        "--// Child Components //--",
        "--------------------------------------------------------------------------------",
        "local Components = Interface.Components",
        "local BaseComponents = Components.Base",
        "local LocalComponents = Components.${0:$TM_FILENAME_BASE}",
        "",
        "--------------------------------------------------------------------------------",
        "--// Main Component //--",
        "--------------------------------------------------------------------------------",
        "",
        "type ${0:$TM_FILENAME_BASE}Props = {",
        "	Id: number,",
        "	Delay: number,",
        "	Price: number,",
        "}",
        "",
        "return function(props: ${0:$TM_FILENAME_BASE}Props)",
        "	--// Value States",
        "	local Active = Value(false)",
        "",
        "	--// Signals",
        "InterfaceSignals:SubscribeToState(\"Page\", function(NewPage: string)",
        "\tActive:set(NewPage == Settings.Page)",
        "end)",
        "",
        "	--// Debugging",
        "	if InterfaceSettings.AutoActive == Settings.Page then",
        // "		task.delay(props.Delay or InterfaceSettings.Tween.ContentDelay, function()",
        "		task.delay(0, function()",
        "			Active:set(true)",
        "		end)",
        "	end",
        "",
        "	local ${0:$TM_FILENAME_BASE} = New(\"Frame\")({",
        "		BackgroundTransparency = 1,",
        "		Size = UDim2.fromScale(0.5, 0.5),",
        "		AnchorPoint = Vector2.new(0.5, 0.5),",
        "		Position = UDim2.fromScale(0.5, 0.5),",
        "		[Children] = {},",
        "	})",
        "",
        "	return ${0:$TM_FILENAME_BASE}",
        "end",
        ""
      ],
      "description": ""
    },
    "Fusion Componenet": {
      "prefix": "fcomponent",
      "body": [
        "--// Services",
        "local Plugin = script:FindFirstAncestorWhichIsA(\"Plugin\")",
        "local Packages = Plugin.Packages",
        "local Players = game:GetService(\"Players\")",
        "local RunService = game:GetService(\"RunService\")",
        "",
        "--// Interface",
        "local Interface = Plugin.Interface",
        "local InterfaceSignals = require(Plugin.Config.Events.Interface)",
        "local InterfaceSettings = require(Interface.Settings)",
        "",
        "--// Util",
        "local Util = Interface.Util",
        "local Tweens = require(Util.Tweens)",
        "local Sounds = require(Util.Sounds)",
        "local Images = require(Util.Images)",
        "",
        "--// Packages",
        "local Packages = Plugin.Packages",
        "",
        "--// Fusion",
        "local Fusion = require(Packages.Fusion)"
        "",
        "--// Fusion Imports",
        "local New = Fusion.New",
        "local Ref = Fusion.Ref",
        "local Out = Fusion.Out",
        "local Value = Fusion.Value",
        "local Tween = Fusion.Tween",
        "local OnEvent = Fusion.OnEvent",
        "local Cleanup = Fusion.Cleanup",
        "local Computed = Fusion.Computed",
        "local Observer = Fusion.Observer",
        "local Children = Fusion.Children",
        "",
        "--// Configuration",
        "local Settings = {",
        "	Debug = true,",
        "	Page = \"${TM_DIRECTORY/.*\\/(.*)$/$1/g}\",",
        "}",
        "",
        "--------------------------------------------------------------------------------",
        "--// Child Components //--",
        "--------------------------------------------------------------------------------",
        "local Components = Interface.Components",
        "local BaseComponents = Components.Base",
        "local LocalComponents = Components.${TM_DIRECTORY/.*\\/(.*)$/$1/g}",
        "",
        "--------------------------------------------------------------------------------",
        "--// Main Component //--",
        "--------------------------------------------------------------------------------",
        "",
        "type ${0:$TM_FILENAME_BASE}Props = {}",
        "",
        "return function(props: ${0:$TM_FILENAME_BASE}Props)",
        "	--// Value States",
        "	local Active = Value(false)",
        "",
        "	--// Signals",
        "\tInterfaceSignals:SubscribeToState(\"Page\", function(NewPage: string)",
        "\t\tActive:set(NewPage == Settings.Page)",
        "\tend)",
        "",
        "",
        "	--// Debugging",
        "	if InterfaceSettings.AutoActive == Settings.Page then",
        // "		task.delay(props.Delay or InterfaceSettings.Tween.ContentDelay, function()",
        "		task.delay(0, function()",
        "			Active:set(true)",
        "		end)",
        "	end",
        "",
        "	local ${0:$TM_FILENAME_BASE} = New(\"Frame\")({",
        "		BackgroundTransparency = 1,",
        "		Size = UDim2.fromScale(0.5, 0.5),",
        "		AnchorPoint = Vector2.new(0.5, 0.5),",
        "		Position = UDim2.fromScale(0.5, 0.5),",
        "		[Children] = {},",
        "	})",
        "",
        "	return ${0:$TM_FILENAME_BASE}",
        "end",
        ""
      ],
      "description": ""
    },
    "Fusion Component Tween": {
      "prefix": "ftween",
      "body": [
        "Tween(",
        "	Computed(function()",
        "		return Active:get() and 0 or 1",
        "	end),",
        "	Tweens.Default",
        ")"
      ],
      "description": ""
    },

    "Fusion Story": {
      "prefix": "fstory",
      "body": [
        "--// Services",
        "local Plugin = script:FindFirstAncestorWhichIsA(\"Plugin\")",
        "local Packages = Plugin.Packages",
        "",
        "--// Pages",
        "local Components = Plugin.Interface.Components",
        "local Pages = Plugin.Interface.Pages",
        "",
        "local ${0:$TM_FILENAME_BASE}Frame = require(Pages.${0:$TM_FILENAME_BASE})()",
        "",
        "return function(target: Frame)",
        "\t${0:$TM_FILENAME_BASE}Frame.Parent = target",
        "\treturn function()",
        "\t\t${0:$TM_FILENAME_BASE}Frame:Destroy()",
        "\tend",
        "end",
        ""
      ],
      "description": ""
    }
}